type TestingType = Cypress.TestingType;
type StrippedCypressModuleAPIOptions = Omit<Partial<CypressCommandLine.CypressRunOptions>, "tag" | "spec" | "exit" | "headed" | "headless" | "noExit" | "parallel" | "record" | "key" | "tag" | "group" | "ciBuildId">;
type CurrentsRunParameters = StrippedCypressModuleAPIOptions & {
    /** The CI build ID to use for the run */
    ciBuildId?: string;
    /** The batch size defines how many spec files will be served in one orchestration "batch". If not specified, will use the projectId from currents.config.js, the default value is 1 (i.e. no batching) */
    batchSize?: number;
    /** The URL of the currents server to use. If not specified, will use the one from currents.config.js */
    cloudServiceUrl?: string;
    /** The environment variables to use for the run */
    env?: Record<string, unknown>;
    /** The group id to use for the run */
    group?: string;
    /**  The record key to use */
    recordKey?: string;
    /** Whether to run the spec files in parallel */
    parallel?: boolean;
    /** The project ID to use. */
    projectId?: string;
    /** The array of spec patterns for the execution */
    spec?: string[];
    /** The array of tags for the execution */
    tag?: string[];
    /** "e2e" or "component", the default value is "e2e" */
    testingType?: TestingType;
};
interface CurrentsRunAPI extends CurrentsRunParameters {
    readonly projectId: string;
    readonly recordKey: string;
}

/**
 * Run Cypress tests with a cloud service of your choice and return the results
 *
 * @augments CurrentsRunAPI
 * @returns {CypressCommandLine.CypressRunResult} The test results, or undefined if no tests were run
 */
declare function run(params: CurrentsRunAPI): Promise<CypressCommandLine.CypressRunResult | undefined>;

export { run };
